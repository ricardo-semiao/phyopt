[{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the Pb-Hybrid Algorithm","text":"article, introduce use optimize_phy() function. ’ll work two examples, one trivial, one much.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"example","dir":"Articles","previous_headings":"Introduction","what":"Example","title":"Using the Pb-Hybrid Algorithm","text":"problem interest : \\[ \\begin{array}{lr}     \\min_{x, \\tilde{x}} x^2 + \\tilde{x}^2 ~~s.t.~~ \\tilde{x} - 2 \\geq 0,\\\\     X = \\tilde{X} = [-10, 10] \\end{array} \\] First, lets load package: ’ll also set objects , explain later.","code":"library(phyopt) #> Loading required package: purrr #> Loading required package: rlang #>  #> Attaching package: 'rlang' #> The following objects are masked from 'package:purrr': #>  #>     %@%, flatten, flatten_chr, flatten_dbl, flatten_int, flatten_lgl, #>     flatten_raw, invoke, splice #> Loading required package: mathjaxr stopper <- flow_stopper(list(max_iter = t ~ .m >= 20)) logger <- flow_logger()"},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"solving-the-example","dir":"Articles","previous_headings":"","what":"Solving The Example","title":"Using the Pb-Hybrid Algorithm","text":"First, lets define mathematical objects problem: format x_dom? different. end, whichever format useful way ’ll define operators. Lets get , problem, ’ll choose random (uniform) sampler initialization, golden search optimization, genetic algorithm’s approach crossover+mutation updater. ’ve different choice, user can even mix match choices.","code":"f <- \\(x, xtil) x^2 + xtil^2 g <- \\(x, xtil) 0 gtil <- \\(xtil) xtil - 2  x_dom <- xtil_dom <- list(c(-10, 10))"},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"initializer","dir":"Articles","previous_headings":"Solving The Example","what":"Initializer","title":"Using the Pb-Hybrid Algorithm","text":"numbers samples \\(N\\) fixed \\(10\\), ’ll set beginning. , consider example random sampler, resamples draw fails constraint: Note arguments must exactly (names). result required \\(X \\times \\tilde{m}\\) matrix:","code":"n_samples <- 10  initializer <- function(xtil_dom, gtil) {   xtil <- rep(NA, n_samples)      for (s in seq_len(n_samples)) {     draw <- NA     while (is.na(draw)) {       draw <- runif(1, xtil_dom[[1]][1], xtil_dom[[1]][2])       draw <- ifelse(gtil(draw) >= 0, yes = draw, no = NA)     }     xtil[s] <- draw   }    matrix(xtil, n_samples, 1) } initializer(xtil_dom, gtil) #>           [,1] #>  [1,] 6.686661 #>  [2,] 2.015218 #>  [3,] 4.657640 #>  [4,] 5.450430 #>  [5,] 7.492013 #>  [6,] 9.510957 #>  [7,] 3.567609 #>  [8,] 4.706392 #>  [9,] 9.610793 #> [10,] 4.830431"},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"optimizer","dir":"Articles","previous_headings":"Solving The Example","what":"Optimizer","title":"Using the Pb-Hybrid Algorithm","text":"Now, lets golden search optimizer. Se Wikipedia page learn . , arguments names required. denote optimizer run every sample \\(xtil_s\\) current population \\(S_t\\). functions f_s g_s receive values : Note required data frame format. Also note (.) used create matrix column. knew data frames matrices columns? See section [Advanced R (2e)](https://adv-r.hadley.nz/vectors-chap.html?q=(#matrix--data-frame-columns) information. neat trick enables elegant use flow_* formulas evaluation. Also note one create optimizer randomly chooses list optimizers, use different ones time, sensitivity reasons.","code":"optimizer <- function(f_s, g_s, x_dom, t, xtil_s) {   phi <- 2 / (sqrt(5) + 1)    a <- x_dom[[1]][1];  b <- x_dom[[1]][2]   x1 <- b - phi * (b - a);  x2 <- a + phi * (b - a)   fx1 <- f_s(x1);  fx2 <- f_s(x2)    iter <- 0    while (abs(b - a) > 1e-5 && iter < 1000) {     if (fx1 < fx2) {       b <- x2       x2 <- x1; fx2 <- fx1       x1 <- b - phi * (b - a)       fx1 <- f_s(x1)     } else {       a <- x1       x1 <- x2; fx1 <- fx2       x2 <- a + phi * (b - a)       fx2 <- f_s(x2)     }     iter <- iter + 1   }    x <- (a + b) / 2   data.frame(x = I(matrix(x)), xtil = I(matrix(xtil_s)), f = f_s(x), i = NA) } xtil_s <- 5 f_s <- \\(x) f(x, xtil_s) g_s <- \\(x) g(x, xtil_s)  optimizer(f_s = f_s, g_s = g_s, x_dom = x_dom, t = 5, xtil_s = xtil_s) #>              x xtil  f  i #> 1 2.053031e-06    5 25 NA"},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"joining-the-pieces","dir":"Articles","previous_headings":"Solving The Example","what":"Joining The Pieces","title":"Using the Pb-Hybrid Algorithm","text":"Lets join . simple terms, algorithm initializes : , enters loop (emulated t <- 1 first iteration), creates xtil_t (\\(S_t\\)) variable. , sample \\(s\\) loop via map (, see Advanced R), save 1-row data frames list. list ‘rbinded’ via list_rbind. See turns : Note matrices columns. case hard differentiate 1-column matrices, accommodate dimension \\(m\\) \\(\\tilde{m}\\). See full results :","code":"results <- vector(\"list\", length(stopper$iter_upper))  results[[1]]$xtil <- initializer(xtil_dom, gtil) t <- 1 xtil_t <- results[[t]]$xtil  results[[t]] <- list_rbind(map(seq_len(nrow(xtil_t)), function(s) {   xtil_s <- xtil_t[s, ]   f_s <- \\(x) f(x, xtil_s)   g_s <- \\(x) g(x, xtil_s)   optimizer(f_s = f_s, g_s = g_s, x_dom = x_dom, t = t, xtil_s = xtil_s) })) str(results[[t]]) #> 'data.frame':    10 obs. of  4 variables: #>  $ x   : 'AsIs' num [1:10, 1] 2.05e-06 2.05e-06 2.05e-06 2.05e-06 2.05e-06 ... #>  $ xtil: 'AsIs' num [1:10, 1] 3.92 3.77 2.73 4.13 8.97 ... #>  $ f   : num  15.34 14.22 7.45 17.05 80.49 ... #>  $ i   : logi  NA NA NA NA NA NA ... results[[t]] #>               x     xtil         f  i #> 1  2.053031e-06 3.916478 15.338797 NA #> 2  2.053031e-06 3.771120 14.221347 NA #> 3  2.053031e-06 2.729312  7.449146 NA #> 4  2.053031e-06 4.128677 17.045972 NA #> 5  2.053031e-06 8.971532 80.488378 NA #> 6  2.053031e-06 3.603258 12.983471 NA #> 7  2.053031e-06 2.833587  8.029215 NA #> 8  2.053031e-06 3.205687 10.276429 NA #> 9  2.053031e-06 5.312003 28.217379 NA #> 10 2.053031e-06 5.393496 29.089800 NA"},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"updater","dir":"Articles","previous_headings":"Solving The Example","what":"Updater","title":"Using the Pb-Hybrid Algorithm","text":"Now lets move forward, define genetic algorithm approach update sample. sort \\(S_t\\) based lowest values \\(f\\) decreasing = FALSE, looking minimum. , select pairs values, greater probability lower values. used create “child”, “mutated” random multiplicative noise. Finally, constraint checked triggers resampling needed. , fixed argument names matrix result. See output :","code":"updater <- function(xtil_dom, gtil, r_t, t) {   xtil_ordered <- r_t$xtil[order(r_t$f, decreasing = FALSE), 1]   xtil_new <- matrix(NA, nrow = n_samples, ncol = 1)    probs <- 1 / (1:n_samples)   probs <- probs / sum(probs)    for (s in seq_len(n_samples)) {     draw <- NA     while (is.na(draw)) {       parents <- sample(n_samples, 2, prob = probs)       draw <- (xtil_ordered[parents[1]] + xtil_ordered[parents[2]]) / 2       draw <- draw * (1 + runif(1, -0.1, 0.1))       draw <- ifelse(gtil(draw) >= 0, draw, NA)     }     xtil_new[s, 1] <- draw   }    xtil_new } updater(xtil_dom = xtil_dom, gtil = gtil, r_t = results[[t]], t = t) #>           [,1] #>  [1,] 7.023325 #>  [2,] 2.600475 #>  [3,] 3.188319 #>  [4,] 3.033947 #>  [5,] 3.323658 #>  [6,] 3.024632 #>  [7,] 4.095910 #>  [8,] 2.935868 #>  [9,] 2.762529 #> [10,] 2.713010"},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"the-optimize_phy-aggregation","dir":"Articles","previous_headings":"Solving The Example","what":"The optimize_phy Aggregation","title":"Using the Pb-Hybrid Algorithm","text":"ingredients combined optimize_phy function, also tests : functions correct arguments. domains correct length. operators correct arguments generate results correct format. Catches errors operators calls help debug code. Calculates metrics check performance, log console, stop algorithm reaches desired value.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"metrics","dir":"Articles","previous_headings":"Solving The Example","what":"Metrics","title":"Using the Pb-Hybrid Algorithm","text":"Lets talk flow_stopper flow_logger. See full help page details, flow_stopper recives list : element formula, expression LHS can access results point, ie: current iteration t time. sequences f (\\(t \\times 1\\) vector) iterations. sequence x (\\(t \\times m\\) matrix) x (\\(t \\times \\tilde{m}\\) matrix). sequence meta-information , whichever format made . , user can define metric wants. expression evaluated current context algorithm, via non-standard evaluation (, Advanced R, yes, favorite R book, knew?), using columns \\(results_t\\) variables (hence beauty matrix-columns). , RHS expression takes value metric .m returns single boolean. Finally, check_expr expression gets vector booleans (.ms) combines logical expression single boolean, TRUE algorithm stopped. allows stopping algorithm group metrics true. flow_logger similar, can also access metrics calculated variables (hence names list ), RHS function formats .m single string. Lets set . stopping criteria reaching 20 iterations. objects comprised elements used algorithm:","code":"list(   max_iter = t ~ .m >= 20,   max_time = time ~ .m >= 600,   f_prop = (max(f[[t]]) - max(f[[t - l]])) / abs(max(f[[t - 1]])) ~ .m < 0.01 ) stopper <- flow_stopper(list(max_iter = t ~ .m >= 20)) logger <- flow_logger() str(stopper) #> List of 3 #>  $ iter_upper   : num 10000 #>  $ get_metrics  :function (results, t, time)   #>  $ check_metrics:function (metrics_t, which = FALSE)   #>  - attr(*, \"class\")= chr \"flow_stopper\" str(logger) #> List of 1 #>  $ log:function (results_t, t, time, metrics_t)   #>  - attr(*, \"class\")= chr \"flow_logger\""},{"path":"https://ricardo-semiao.github.io/phyopt/articles/example.html","id":"the-full-algorithm","dir":"Articles","previous_headings":"Solving The Example","what":"The Full Algorithm","title":"Using the Pb-Hybrid Algorithm","text":"Lets run ! can get duration, stopping criterias met, \\(R_t\\) \\(M_t\\), including best (last): can see got close global minimum \\((0, 2)\\). efficacy due number iters user code.","code":"optima <- optimize_phy(   f, g, gtil,   x_dom, xtil_dom,   initializer, optimizer, updater,   stopper, logger,   check_op = 0 ) #> → => Iter: 1 -- mean(f): 42.489 #> → => Iter: 2 -- mean(f): 25.7647 #> → => Iter: 3 -- mean(f): 22.5993 #> → => Iter: 4 -- mean(f): 18.7294 #> → => Iter: 5 -- mean(f): 17.6873 #> → => Iter: 6 -- mean(f): 17.2743 #> → => Iter: 7 -- mean(f): 15.8075 #> → => Iter: 8 -- mean(f): 14.4458 #> → => Iter: 9 -- mean(f): 12.9763 #> → => Iter: 10 -- mean(f): 12.3554 #> → => Iter: 11 -- mean(f): 11.4878 #> → => Iter: 12 -- mean(f): 10.1704 #> → => Iter: 13 -- mean(f): 9.073 #> → => Iter: 14 -- mean(f): 8.5062 #> → => Iter: 15 -- mean(f): 7.848 #> → => Iter: 16 -- mean(f): 6.9515 #> → => Iter: 17 -- mean(f): 6.4787 #> → => Iter: 18 -- mean(f): 6.1026 #> → => Iter: 19 -- mean(f): 5.7563 #> → => Iter: 20 -- mean(f): 5.5008 #>  #> ✔ Finished after 20 iterations. Stopping criteria(s) were: #> • max_iter: t ~ .m >= 20 str(optima, 1) #> List of 4 #>  $ results     :List of 20 #>  $ metrics     :List of 20 #>  $ metrics_stop: Named chr \"max_iter: t ~ .m >= 20\" #>   ..- attr(*, \"names\")= chr \"max_iter\" #>  $ duration    :List of 4 optima$duration #> $iters #> [1] 20 #>  #> $time_init #> Time difference of 0.01712584 secs #>  #> $time_loop #> Time difference of 1.578941 secs #>  #> $time_total #> Time difference of 1.59607 secs optima$metrics_stop #>                 max_iter  #> \"max_iter: t ~ .m >= 20\" r_t <- optima$results[[20]] r_t[which.max(r_t$f), ] #>               x     xtil        f  i #> 10 2.053031e-06 2.502094 6.260473 NA"},{"path":"https://ricardo-semiao.github.io/phyopt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ricardo Semião. Author, maintainer.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Semião R (2025). phyopt: General-Use Population-Based Hybrid Optimization. R package version 0.0.0.9000, https://ricardo-semiao.github.io/phyopt/, https://https://github.com/ricardo-semiao/phyopt.","code":"@Manual{,   title = {phyopt: General-Use Population-Based Hybrid Optimization},   author = {Ricardo Semião},   year = {2025},   note = {R package version 0.0.0.9000,     https://ricardo-semiao.github.io/phyopt/},   url = {https://https://github.com/ricardo-semiao/phyopt}, }"},{"path":"https://ricardo-semiao.github.io/phyopt/index.html","id":"phyopt","dir":"","previous_headings":"","what":"General-Use Population-Based Hybrid Optimization","title":"General-Use Population-Based Hybrid Optimization","text":"packages implements two-step, population-based, hybrid optimization algorithm, solving problems form: \\[   \\max_{x, \\tilde{x}} f(x, \\tilde{x}) ~~s.t.~~ g(x, \\tilde{x}) \\geq 0,~ \\tilde{g}(\\tilde{x}) \\geq 0\\\\   x \\X,~ \\tilde{x} \\\\tilde{X} \\] paper fully describing motivation, theoretical framework, method design made public soon. now, see viggnette example.Rmd, contains simple example thorough explanation package works. Additionally, see documentation optimize_phy() function, main function package","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"General-Use Population-Based Hybrid Optimization","text":"package public yet.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 phyopt authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Flow Logger Constructor — flow_logger","title":"Flow Logger Constructor — flow_logger","text":"function creates flow logger object calculates metrics logs console. metrics definition done similarly flow_stopper() function (see help page), formulas divided lists, list printed different line.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flow Logger Constructor — flow_logger","text":"","code":"flow_logger(   formulas_list = list(list(t ~ paste(\"=> Iter:\", .m), mean(f) ~ paste(\"mean(f):\",     round(.m, 4)))),   log_each = 1,   sep = \" -- \",   args_alert = list(),   args_ul = list() )"},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flow Logger Constructor — flow_logger","text":"formulas_list list formulas flow_stopper() (list lists), except RHS function takes LHS value .m returns single string printed. log_each integer specifying frequency logging. sep character string used concatenate logs associated list inside formulas_list. args_alert, args_ul list arguments passed cli::cli_alert() cli::cli_ul(), functions format console output.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flow Logger Constructor — flow_logger","text":"\"flow_logger\"-class object passed optimize_phy().","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_logger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flow Logger Constructor — flow_logger","text":"LHS formulas evaluated way flow_stopper() (see help page), user access current results (\\(R_t\\)). Additionally, metric current iteration (\\(M_t\\)) can accessed name (formulas named).","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_stopper.html","id":null,"dir":"Reference","previous_headings":"","what":"Flow Stopper Constructor — flow_stopper","title":"Flow Stopper Constructor — flow_stopper","text":"function creates flow stopper object calculate metrics, iteration, based current results algorithm, checks algorithm stop based metrics. Given objects \\(R\\) (list results every iteration), user can define set metrics \\(M_t\\), calculated every iteration \\(t\\). Based metric\\(m\\), stopping criterion can defined via expression \\(m\\) returns boolean. Finally, list booleans given iteration \\(t\\) can combined logic expression determine algorithm stop.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_stopper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flow Stopper Constructor — flow_stopper","text":"","code":"flow_stopper(   formulas = list(get_metric$iter(100), get_metric$f_prop(0.01)),   check_expr = ~any(.ms, na.rm = TRUE),   iter_upper = 10000 )"},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_stopper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flow Stopper Constructor — flow_stopper","text":"formulas list formulas specifying metrics \\(m\\) calculated LHS (see details), stopping criterion depending metric value .m, RHS. check_expr RHS-formula logic operation, depending vector booleans .ms. iter_upper technical argument used initialize containers \\(R\\) \\(M\\). stopping criterion based \\(t\\) defined formulas argument.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_stopper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flow Stopper Constructor — flow_stopper","text":"\"flow_stopper\"-class object passed optimize_phy().","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/flow_stopper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flow Stopper Constructor — flow_stopper","text":"LHS evaluated context algorithm, .e., can depend variables t (current iteration), time (current time seconds), list element \\(R\\) (length t). example, f[[t - 1]] evaluate vector objective function values samples previous iteration. Note can set unfeasible stopping criteria, FALSE get value metric end algorithm.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/get_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Get common metrics' formulas — get_metric","title":"Get common metrics' formulas — get_metric","text":"Get common metrics' formulas","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/get_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get common metrics' formulas — get_metric","text":"","code":"get_metric"},{"path":"https://ricardo-semiao.github.io/phyopt/reference/get_metric.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Get common metrics' formulas — get_metric","text":"object class list length 2.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_pbhy.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a function with the PB-Hybrid algorithm — optimize_pbhy","title":"Optimize a function with the PB-Hybrid algorithm — optimize_pbhy","text":"function implements two-step, population-based, hybrid optimization algorithm, solving problems form: _x, x f(x, x) ~~s.t.~~ g(x, x)  0,~ g(x)  0\\ x  X,~ x  X See readme details format problems, pb-hy algorithm useful.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_pbhy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a function with the PB-Hybrid algorithm — optimize_pbhy","text":"","code":"optimize_pbhy(   f = function(x, xtil) NA,   g = function(x, xtil) 0,   gtil = function(xtil) 0,   x_dom,   xtil_dom,   initializer,   optimizer,   updater,   stopper = flow_stopper(),   logger = flow_logger(),   check_samples = NULL,   check_op = c(1, 2) )"},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_pbhy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a function with the PB-Hybrid algorithm — optimize_pbhy","text":"f Objective function f(x, x). g, gtil Constraint functions g(x, x) g(x). default, never-binding ones. x_dom, xtil_dom Domains X X. used optimizer (X), initializer/updater (X). list m m entries. initializer Operator (function) initialize population, S_0 = initializer(X, g) (see details). optimizer Operator (function) solve reduced problem, R_t = optimizer(X, g, t, S_t) (see details). updater Operator (function) update population, S_t+1 = updater(X, g, t, S_t, R_t). stopper Stopping criteria algorithm, created via flow_stopper(). logger Logger tracking process, created via flow_logger(). check_samples Number samples expected S_t. Set NULL check (required changes iterations t). check_op Integer vector iterations check operators producing results needed format. Helps catching errors. Set 0 check.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_pbhy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize a function with the PB-Hybrid algorithm — optimize_pbhy","text":"list containing: results Optimization results iteration. metrics Metrics calculated optimization process. duration Timing information initialization, main loop, total execution.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_pbhy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize a function with the PB-Hybrid algorithm — optimize_pbhy","text":"function wrapper operator functions, organizing correct structure population-based, two-step, hybrid algorithm. , job user implement operators correctly: initializer: todo. optimizer: todo. updater: todo.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_phy.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a function with the PB-Hybrid algorithm — optimize_phy","title":"Optimize a function with the PB-Hybrid algorithm — optimize_phy","text":"function implements two-step, population-based, hybrid optimization  algorithm, solving problems form: \\[\\max_{x, \\tilde{x}} f(x, \\tilde{x}) ~~s.t.~~ g(x, \\tilde{x}) \\geq 0,~ \\tilde{g}(\\tilde{x}) \\geq 0\\ x \\X,~ \\tilde{x} \\\\tilde{X}\\] See readme details format problems, pb-hy  algorithm useful.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_phy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a function with the PB-Hybrid algorithm — optimize_phy","text":"","code":"optimize_phy(   f = function(x, xtil) NA,   g = function(x, xtil) 0,   gtil = function(xtil) 0,   x_dom,   xtil_dom,   initializer,   optimizer,   updater,   stopper = flow_stopper(),   logger = flow_logger(),   check_samples = NULL,   check_op = c(1, 2) )"},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_phy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a function with the PB-Hybrid algorithm — optimize_phy","text":"f Objective function \\(f(x, \\tilde{x})\\). g, gtil Constraint functions \\(g(x, \\tilde{x})\\) \\(\\tilde{g}(\\tilde{x})\\). default, never-binding ones. x_dom, xtil_dom Domains \\(X\\) \\(\\tilde{X}\\). used `optimizer` (\\(X\\)), `initializer`/`updater` (\\(\\tilde{X}\\)). list \\(m\\) \\(\\tilde{m}\\) entries. initializer Operator (function) initialize population, \\(S_0 = \\text{initializer}(\\tilde{X}, \\tilde{g})\\) (see details). optimizer Operator (function) solve reduced problem, \\(R_t = \\text{optimizer}(X, g, t, S_t)\\) (see details). updater Operator (function) update population, \\(S_{t+1} = \\text{updater}(\\tilde{X}, \\tilde{g}, t, S_t, R_t)\\). stopper Stopping criteria algorithm, created via [flow_stopper()]. logger Logger tracking process, created via [flow_logger()]. check_samples Number samples expected \\(S_t\\). Set `NULL` check (required changes iterations \\(t\\)). check_op Integer vector iterations check operators producing results needed format. Helps catching errors. Set `0` check.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_phy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize a function with the PB-Hybrid algorithm — optimize_phy","text":"list containing: results Optimization results iteration. metrics Metrics calculated optimization process. duration Timing information initialization, main loop, total  execution.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/optimize_phy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize a function with the PB-Hybrid algorithm — optimize_phy","text":"function wrapper operator functions, organizing  correct structure population-based, two-step, hybrid algorithm. ,  job user implement operators correctly: * `initializer`: todo. * `optimizer`: todo. * `updater`: todo.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/pbhy.optr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pbhy.optr: General-Use Population-Based Hybrid Optimization — pbhy.optr-package","title":"pbhy.optr: General-Use Population-Based Hybrid Optimization — pbhy.optr-package","text":"todo.","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/pbhy.optr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pbhy.optr: General-Use Population-Based Hybrid Optimization — pbhy.optr-package","text":"Maintainer: Ricardo Semião ricardo.semiao@outlook.com","code":""},{"path":"https://ricardo-semiao.github.io/phyopt/reference/phyopt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phyopt: General-Use Population-Based Hybrid Optimization — phyopt-package","title":"phyopt: General-Use Population-Based Hybrid Optimization — phyopt-package","text":"todo.","code":""},{"path":[]},{"path":"https://ricardo-semiao.github.io/phyopt/reference/phyopt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phyopt: General-Use Population-Based Hybrid Optimization — phyopt-package","text":"Maintainer: Ricardo Semião ricardo.semiao@outlook.com","code":""}]
